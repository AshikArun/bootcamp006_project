{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(DT)\nlibrary(threejs)\nlibrary(rgdal)\nlibrary(maptools)\nlibrary(dplyr)\nlibrary(googleVis)\nlibrary(NISTunits)\n\nshinyServer(function(input, output, session) {\n  \n  ##=====================================================================>\n  ## TAB: MAP\n  ##=====================================================================>\n  #only show map theme option on map page\n  output$theme <- renderUI({\n    if (input$menu == \"map\") {\n      return(\n          div(\n              HTML('<hr style=\"color: purple;\">'),\n              HTML('<h4 style=\"padding-left: 12px; padding-bottom: 0px; margin: 0px;\">Appearance</h4>'),\n              selectizeInput(\"theme\", \"Map Theme:\", themes)\n          )\n        ) \n    } \n  })\n  #set theme\n  observeEvent(input$theme, {\n    earth <- system.file(\"images/world.jpg\",  package=\"threejs\")\n    if (input$theme == 'Terrain') {\n      earth <- \"http://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg\"\n    }\n    values$theme <- earth\n  })\n  #dont show timer on info page\n  # output$slider <- renderUI({\n  #   if (input$menu != \"info\") {\n  #       return(\n  #         sliderInput(\"slider\", \"Time\", \n  #           min(ihs$Date, na.rm=TRUE), \n  #           max(ihs$Date, na.rm=TRUE), \n  #           value= c(min(ihs$Date, na.rm=TRUE), min(ihs$Date, na.rm=TRUE) + 30), \n  #           step = 7,\n  #           timeFormat='%v',\n  #           animate=animationOptions(interval=250, loop=T))\n  #       )\n  #   }\n  # })\n  output$daterange <- renderUI({\n    dateRangeInput(\"daterange\", \"Date range:\",\n                 start = input$slider[1],\n                 end  = input$slider[2],\n                 min= min(ihs$Date, na.rm=TRUE),\n                 max = max(ihs$Date, na.rm=TRUE),\n                 format = \"dd-mm-yyyy\")\n  })\n\n  values <- reactiveValues(theme = system.file(\"images/world.jpg\",  package=\"threejs\"),\n                           lat = 0, long = 0, data = NULL, nodest= NULL)\n \n  #main slider filter\n  observeEvent(input$slider, {\n    #no destinations\n    #filter out NA destinations\n    data <- ihs[!is.na(ihs$Destination.Country.Lat) & !is.na(ihs$Source.Country.Lat),]\n    #filter out all routes where destination is same as source\n    data <- data[data$Source..1. != data$Primary.Destination.Country,] \n    #filter data based on date slider \n    values$data <- data[data$Date >= input$slider[1] & data$Date <= input$slider[2],] \n    #TODO if animation button is on only  \n    values$lat <- values$lat + pi/180 * .25 #rotate up \n    values$long <- values$long + pi/180 * -1 #rotate right\n  })\n  # \n  degrees.to.radians<-function(degrees,minutes) {\n      decimal<-minutes/60\n      c.num<-degrees+decimal\n      radians<-c.num*pi/180\n      radians\n  }\n  #main filter function \n  filterData <- reactive({\n    if(!is.null(input$filter)) {\n      #animate to last selected country ##TODO PROPER CONVERSION FORMULA\n      values$lat <- (countries[countries$Country == input$filter[length(input$filter)], ]$Latitude*pi)/180\n      values$long <- (countries[countries$Country == input$filter[length(input$filter)], ]$Longitude*pi)/180\n      # lat <- strsplit(as.character(countries[countries$Country == input$filter[length(input$filter)], ]$Latitude), '\\\\.')\n      # long <- strsplit(as.character(countries[countries$Country == input$filter[length(input$filter)], ]$Longitude), '\\\\.')\n      # values$lat <-  degrees.to.radians(as.numeric(lat[[1]][1]),as.numeric(lat[[1]][2]))\n      # values$long <- degrees.to.radians(as.numeric(long[[1]][1]),as.numeric(long[[1]][2]))\n      return(values$data[values$data[,input$radio] %in% input$filter,])\n    } else {\n      return(values$data)\n    }\n  })\n  output$filter <- renderUI({\n      if (input$radio == 'Source..1.') {\n        label <- 'Source:'\n      } else {\n        label <- 'Destination:'\n      }\n      columns <-  unique(values$data[ ,input$radio])\n      # print(sort(columns))\n      selectInput(\"filter\", paste(label, sep=''),  \n          c(\"All\" = \"\", columns), \n          selectize=TRUE, \n          multiple=TRUE) \n  })\n  \n  output$value <- renderValueBox({\n      if (is.null(input$filter)) {\n          #get opposite label and input than what is selectedon radio button\n          label  <- ifelse(input$radio == 'Source..1.', 'Export', 'Import')\n          radio <- ifelse(input$radio == 'Source..1.', 'Source..1.', 'Primary.Destination.Country')\n          #use all data if not filtered\n          if (is.null(input$filter)) {\n            data <- values$data\n          } else {\n            data <- filterData()\n          }\n          #summarize filtered data on radio button select - sort desc on sum\n          data <- arrange(data %>% group_by_(radio) %>% summarise(sum=sum(volume)), desc(sum))\n          valueBox(\n            data[1,1], \n            paste(\"Greatest \", label,' Country \\n ',prettyNum(data[1,2], scientific=FALSE, big.mark=','), 'MT', sep=''),\n            color = \"green\"\n          )\n      } else {\n          #get opposite label and input than what is selectedon radio button\n          label  <- ifelse(input$radio == 'Source..1.', 'Export', 'Import')\n          radio <- ifelse(input$radio == 'Source..1.', 'Source..1.', 'Primary.Destination.Country')\n          #use all data if not filtered\n          if (is.null(input$filter)) {\n              data <- values$data\n          } else {\n              data <- filterData()\n          }\n          #summarize filtered data on radio button select - sort desc on sum\n          data <- arrange(data %>% group_by_(radio) %>% summarise(sum=sum(volume)), desc(sum))\n          valueBox(\n            paste(input$filter, collapse = ', '), \n            paste(\"Greatest \", label,' Country \\n ', prettyNum(data[1,2], scientific=FALSE, big.mark=','), 'MT', sep=''),\n            color = \"green\"\n          )\n      }\n  })\n  \n  output$value1 <- renderValueBox({\n    #set label\n    if (is.null(input$filter)) {\n      label <- 'Volume'\n    } else if (input$radio == 'Source..1.') {\n      label <- 'Exports'\n    } else {\n      label <- 'Imports'\n    }\n    #use all data if not filtered\n    if (is.null(input$filter)) {\n      data <- values$data\n    } else {\n      data <- filterData()\n    }\n    valueBox(\n      paste(prettyNum(sum(data$volume, na.rm=TRUE), scientific=FALSE, big.mark=','), \" MT\"), paste('Total ', label, ' (C3+C4)', sep=''),\n      color = \"purple\"\n    )\n  })\n  \n  output$value2 <- renderValueBox({\n      #get opposite label and input than what is selectedon radio button\n      label  <- ifelse(input$radio == 'Source..1.', 'Import', 'Export')\n      radioOpposite <- ifelse(input$radio == 'Source..1.', 'Primary.Destination.Country', 'Source..1.')\n      #use all data if not filtered\n      if (is.null(input$filter)) {\n          data <- values$data\n      } else {\n          data <- filterData()\n      }\n      #summarize filtered data on opposite of radio button select - sort desc on sum\n      data <- arrange(data %>% group_by_(radioOpposite) %>% summarise(sum=sum(volume)), desc(sum))\n      valueBox(\n          data[1,1], \n          paste(\"Greatest \", label,' Country \\n ',prettyNum(data[1,2], scientific=FALSE, big.mark=','), 'MT', sep=''),\n          color = \"orange\"\n      )\n  })\n  \n  # data(wrld_simpl)                             # Basic country shapes\n  # load(url(\"http://illposed.net/bono.rdata\"))  # Awareness index data\n  # \n  # bgcolor <- \"#000025\"\n  # earth <- tempfile(fileext=\".jpg\")\n  # jpeg(system.file(\"images/world.jpg\",  package=\"threejs\"), width=2048, height=1024, quality=100, bg=bgcolor, antialias=\"default\")\n  # par(mar = c(0,0,0,0),    pin = c(4,2),    pty = \"m\",    xaxs = \"i\",\n  #     xaxt = \"n\",          xpd = FALSE,    yaxs = \"i\",    yaxt = \"n\")\n  # \n  # map_palette <- apply(col2rgb(heat.colors(5)[5:1])/768,2,function(x)rgb(x[1],x[2],x[3]))\n  # # Restrict bono data to countries from the maptools package\n  # bono <- bono[rownames(bono) %in% wrld_simpl$NAME, ,drop=FALSE]\n  # # Set a default color for each country and the colors from the bono data\n  # clrs <- rep(map_palette[1], length(wrld_simpl$NAME))\n  # names(clrs) <- wrld_simpl$NAME\n  # clrs[rownames(bono)] <- map_palette[bono$index]\n  # \n  # plot(wrld_simpl,  col=\"#FFFFF\",   bg=bgcolor,        border=\"cyan\",  ann=FALSE,\n  #      axes=FALSE,  xpd=FALSE,  xlim=c(-180,180), ylim=c(-90,90),  setParUsrBB=TRUE)\n  # # \n  # graphics.off()\n  # legendcol=heat.colors(5)[5:1]\n  ##arcs\n  # portFlow   <- select(data,Source.Port.Lat,Source.Port.Long,Destination.Port.Lat,Destination.Port.Long)\n  \n  #set data to be render in arcs\n  flow <- reactive({\n    return(select(filterData(),Source.Country.Lat,Source.Country.Long,Destination.Country.Lat,Destination.Country.Long))\n  })\n  #arc thickness based on volume\n  volume <- reactive({\n    return((filterData()$volume / max(filterData()$volume, na.rm=TRUE)) * 4)\n  })\n  # arcsHeight <- round(((volume / max(volume, na.rm=TRUE)) * .49) + .5, 2)\n  # set globe\n  output$globe <- renderGlobe(\n      globejs(\n          img=values$theme,\n          # lat=data()$Source.Country.Lat,\n          # long=data()$Source.Country.Lat,\n          # val=,    # Bar height\n          # color=data()$color,\n          arcs=flow(),\n          arcsHeight=.9, \n          arcsLwd=volume(), \n          arcsColor=filterData()$color, \n          arcsOpacity=0.25,\n          pointsize=0.5,\n          rotationlat=values$lat,\n          rotationlong=values$long,\n          fov=50,\n          atmosphere=TRUE\n      )\n  )\n  \n  ##=====================================================================>\n  ## TAB: DATA\n  ##=====================================================================>\n  output$table <- DT::renderDataTable({\n    datatable(\n      transmute(filterData(), \n                'Date'=Date,\n                'Source Country'=Source..1.,\n                'Destination Country'=Primary.Destination.Country, \n                'Vessel Name'=Vessel.Name,\n                'Vessel Size (CBM)'=Vessel.Size..CBM.,\n                'Volume C3+C4 (MT)'=volume),\n      rownames=values$data$Participant..1.          \n      # filter = 'top'\n    )\n    # %>% formatStyle(input$selected, background=\"skyblue\", fontWeight='bold')\n  })\n  \n  ##=====================================================================>\n  ## TAB: FLOW\n  ##=====================================================================>\n  output$sankey <- renderGvis({\n      #use all data if not filtered\n      if (is.null(input$filter)) {\n        flow <- values$data\n      } else {\n        flow <- filterData()\n      }\n      #groupby source country and destination so as to combine volumes of flow to the same destination. \n      flow <- flow %>% group_by(Source..1., Primary.Destination.Country) %>% summarise(volume=sum(volume)) %>% arrange(desc(volume))\n    \n      #limit to 25 most volumeous trades\n      flow <- flow[1:25,]\n      flow <- data.frame(From=flow$Source..1.,\n                       To=flow$Primary.Destination.Country,\n                       Volume=flow$volume)\n      result <- gvisSankey(flow, from=\"From\", to=\"To\", weight=\"Weight\", \n         options=list(\n             width='100%',\n             height=600,\n             sankey=\"{link: {colors: ['#0055ff','#00aaff','#00ffaa','#aaff00'],colorMode: 'gradient' },\n             node: { colors: ['#0055ff','#00aaff','#00ffaa','#aaff00']},\n             label: { color: 'purple' } }\")\n         )\n      \n      result\n  })\n  \n  ##=====================================================================>\n  ## TAB: INFO\n  ##=====================================================================>\n})\n",
    "created" : 1469812365613.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1125558300",
    "id" : "9FEBC5CC",
    "lastKnownWriteTime" : 1470013909,
    "last_content_update" : 1470013909146,
    "path" : "~/Documents/NYCDSA/Projects/ShinyApp/ShinyApp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}