library(scales)
ggplot(q2,aes(x = q2$Group.1, y = q2$x))+ geom_bar(aes(fill = q2$Group.1), stat = 'identity') + ggtitle("Total Amount of Revenue based on each day of the week") + xlab("Day") + ylab("Amount") + scale_fill_discrete(guide=FALSE) + scale_y_continuous(breaks= pretty_breaks())
library(ggplot2)
ggplot(q2,aes(x = q2$Group.1, y = q2$x))+ geom_bar(aes(fill = q2$Group.1), stat = 'identity') + ggtitle("Total Amount of Revenue based on each day of the week") + xlab("Day") + ylab("Amount") + scale_fill_discrete(guide=FALSE) + scale_y_continuous(breaks= pretty_breaks())
library(scales)
ggplot(q2,aes(x = q2$Group.1, y = q2$x))+ geom_bar(aes(fill = q2$Group.1), stat = 'identity') + ggtitle("Total Amount of Revenue based on each day of the week") + xlab("Day") + ylab("Amount") + scale_fill_discrete(guide=FALSE) + scale_y_continuous())
ggplot(q2,aes(x = q2$Group.1, y = q2$x))+ geom_bar(aes(fill = q2$Group.1), stat = 'identity') + ggtitle("Total Amount of Revenue based on each day of the week") + xlab("Day") + ylab("Amount") + scale_fill_discrete(guide=FALSE) + scale_y_continuous()
x <- mutate(x, clock = substr(x$tpep_pickup_datetime, 11, 15))
library(dplyr)
x <- mutate(x, clock = substr(x$tpep_pickup_datetime, 11, 15))
f <- filter(x, x$pickup == '2015-01-16')
tm <- aggregate(f$total_amount,by = list(f$clock),sum)
head(tm)
tm$Group.1 <- as.POSIXct(tm$Group.1,format="%H:%M")
ggplot(tm,aes(x = tm$Group.1, y = tm$x)) + geom_point()
ggplot(tm,aes(x = tm$Group.1, y = tm$x)) + geom_line()
ggplot(tm,aes(x = tm$Group.1, y = tm$x)) + geom_smooth(se = FALSE) + ggtitle("Total Amount of Revenue on Friday") + xlab("Time(in 24 hour format)") + ylab("Amount")
ggplot(tm,aes(x = tm$Group.1, y = tm$x)) + geom_smooth(se = FALSE) + ggtitle("Number Of Passenger on Friday") + xlab("Time(in 24 hour format)") + ylab("Count")
ggplot(tm,aes(x = tm$Group.1, y = tm$x)) + geom_smooth(se = FALSE) + ggtitle("Number Of Passengers on Friday") + xlab("Time(in 24 hour format)") + ylab("Count")
s <- filter(x, x$pickup == '2015-01-17')
View(s)
tm2 <- aggregate(s$total_amount,by = list(s$clock),sum)
head(tm2)
tm2$Group.1 <- as.POSIXct(tm2$Group.1,format="%H:%M")
ggplot(tm2,aes(x = tm2$Group.1, y = tm2$x)) + geom_point()
ggplot(tm2,aes(x = tm2$Group.1, y = tm2$x)) + geom_line()
ggplot(tm2,aes(x = tm2$Group.1, y = tm2$x)) + geom_smooth() + ggtitle("Total Amount of Revenue on Saturday") + xlab("Time(in 24 hour format)") + ylab("Amount")
ggplot(tm2,aes(x = tm2$Group.1, y = tm2$x)) + geom_smooth(se = FALSE) + ggtitle("Number of Customers on Saturday") + xlab("Time(in 24 hour format)") + ylab("Amount")
on Saturday") + xlab("Time(in 24 hour format)") + ylab("Amount")
ggplot(tm2,aes(x = tm2$Group.1, y = tm2$x)) + geom_smooth(se = FALSE) + ggtitle("Number of Passengers
on Saturday") + xlab("Time(in 24 hour format)") + ylab("Amount")
ggplot(tm2,aes(x = tm2$Group.1, y = tm2$x)) + geom_smooth(se = FALSE) + ggtitle("Number of Passengers on Saturday") + xlab("Time(in 24 hour format)") + ylab("Amount")
su <- filter(x, x$pickup == '2015-01-18')
View(su)
tm3 <- aggregate(su$total_amount,by = list(su$clock),sum)
head(tm3)
tm3$Group.1 <- as.POSIXct(tm3$Group.1,format="%H:%M")
ggplot(tm3,aes(x = tm3$Group.1, y = tm3$x)) + geom_point()
ggplot(tm3,aes(x = tm3$Group.1, y = tm3$x)) + geom_line()
ggplot(tm3,aes(x = tm3$Group.1, y = tm3$x)) + geom_smooth() + ggtitle("Number of Passengers on Sunday") + xlab("Time(in 24 hour format)") + ylab("Amount")
ggplot(tm3,aes(x = tm3$Group.1, y = tm3$x)) + geom_smooth(se = FALSE) + ggtitle("Number of Passengers on Sunday") + xlab("Time(in 24 hour format)") + ylab("Amount")
ggplot(tm3,aes(x = tm3$Group.1, y = tm3$x)) + geom_smooth(se = FALSE) + ggtitle("Number of Passengers on Sunday") + xlab("Time(in 24 hour format)") + ylab("Count")
m <- filter(x, x$pickup == '2015-01-19' | x$pickup == '2015-01-21' | x$pickup == '2015-01-22' | x$pickup == '2015-01-23')
head(m)
tm4 <- aggregate(m$total_amount,by = list(m$clock),sum)
tm4 <- mutate(tm4, meanx = tm4$x / 4)
head(tm4)
tm4$Group.1 <- as.POSIXct(tm4$Group.1,format="%H:%M")
ggplot(tm4,aes(x = tm4$Group.1, y = tm4$x)) + geom_point()
ggplot(tm4,aes(x = tm4$Group.1, y = tm4$x)) + geom_line()
ggplot(tm4,aes(x = tm4$Group.1, y = tm4$x)) + geom_smooth(se = FALSE) + ggtitle("Number of Passenger on Weekday") + xlab("Time(in 24 hour format)") + ylab("Count")
library(ggplot2)
library(ggmap)
library(dplyr)
x <- mutate(y , pickup = as.Date(y$tpep_pickup_datetime, format = "%m/%d/%Y") )
sub <- y[y$tpep_pickup_datetime %in% n ,]
x <- y[which(y$tpep_pickup_datetime %in% ('1/7/2015')),]
p <- summarise(z, Rev = mean(total_amount))
z <- y %>% group_by(pickup_latitude, pickup_longitude)
head(p)
latitude <- p$pickup_latitude
longitude <- p$pickup_longitude
basemap <- get_map(location='NewYork, UnitedStates', zoom = 11, maptype='roadmap', color='bw', source='google')
p <- summarise(z, Rev = mean(total_amount))
head(p)
latitude <- p$pickup_latitude
longitude <- p$pickup_longitude
basemap <- get_map(location='NewYork, UnitedStates', zoom = 11, maptype='roadmap', color='bw', source='google')
basemap
map1 <- ggmap(basemap, extent='panel', base_layer=ggplot(p, aes(x=longitude, y=latitude)))
print(map1)
basemap <- get_map(location='NewYork, UnitedStates', zoom = 11, maptype='roadmap', color='bw', source='google')
basemap
map1 <- ggmap(basemap, extent='panel', base_layer=ggplot(p, aes(x=longitude, y=latitude)))
print(map1)
# add data points
map.money <- map1 + geom_point(color = "blue", size = 1)
# add plot labels
map.money <- map.money + labs(title="Plot of Taxi Pickup Location ", x="Longitude", y="Latitude")
map.money <- map.money + theme(plot.title = element_text(hjust = 0, vjust = 1, face = c("bold")))
map.survey <- map1 + geom_point(aes(color = Rev), size = 4, alpha = .8)
map.survey <- map.survey + labs(title="Taxi Pickup Location based on Money Value", x="Longitude", y="Latitude", color="Total_Amount")
map.survey <- map.survey + theme(plot.title = element_text(hjust = 0, vjust = 1, face = c("bold")))
print(map.survey)
map.survey <- map1 + geom_point(aes(color = Rev), size = 4, alpha = .1)
map.survey <- map.survey + labs(title="Taxi Pickup Location based on Money Value", x="Longitude", y="Latitude", color="Total_Amount")
map.survey <- map.survey + theme(plot.title = element_text(hjust = 0, vjust = 1, face = c("bold")))
print(map.survey)
map.survey <- map1 + geom_point(aes(color = Rev), size = 1, alpha = .1)
map.survey <- map.survey + labs(title="Taxi Pickup Location based on Money Value", x="Longitude", y="Latitude", color="Total_Amount")
map.survey <- map.survey + theme(plot.title = element_text(hjust = 0, vjust = 1, face = c("bold")))
print(map.survey)
`14outbound` <- read.csv("F:/shiny/14outbound.xls", sep="")
View(`14outbound`)
library(xlsx)
a = read.xlsx("F:/shiny/14outbound.xls", sep="")
a = read.xlsx("F:/shiny/14outbound.xls", sheetName = "")
library(dplyr)
library(ggplot2)
library(xlsx)
library(dplyr)
library(ggplot2)
library(xlsx)
`14outbound` <- read.csv("F:/shiny/14outbound.xls", sep="")
View(`14outbound`)
a <- read.xlsx("F:/shiny/14outbound.xls")
a <- read.xlsx("F:/shiny/14outbound.xls", sheetName = "")
a <- read.xlsx("F:/shiny/14outbound.xls", sheetName = NULL)
a <- read.xlsx("F:/shiny/14outbound.xls", 1)
head(a)
a <- read.xlsx("F:/shiny/14outbound.xls", sheetName = "")
January2016.Analysis.Update <- read.csv("F:/shiny/January2016-Analysis-Update.docx", sep="")
View(January2016.Analysis.Update)
b <- read.xlsx("F:/shiny/January2016-Analysis-Update.docx",1)
library(rJava)
libcurlVersion(rjava)
libcurlVersion(rJava)
library(rJava)
library(rjava)
a <- read.xlsx("F:/shiny/14outbound.xls", sheetName = "")
a <- read.xlsx("F:/shiny/14outbound.xls", 1)
head(a)
b <- read.xlsx("F:/shiny/January2016-Analysis-Update.docx",1)
b <- read.xlsx("F:/shiny/Monthly_Exports_Imports_Balance.xls", 1)
rm()
rm(a)
rm(January2016.Analysis.Update)
rm(14`14outbound`)
rm(14outbound)
rm('14outbound')
Exports <- read.csv("F:/shiny/Data/Exports.csv", header=FALSE)
View(Exports)
rm(Exports)
Exports <- read.csv("F:/shiny/Data/Exports.csv")
View(Exports)
ocm <- read.csv("F:/shiny/Data/ocm-i_comma.csv", header=FALSE)
View(ocm)
rm(ocm)
ocm <- read.csv("F:/shiny/Data/ocm-i_comma.csv")
View(ocm)
top_20 <- read.csv("F:/shiny/Data/top_20_business_vs_pleasure_comma.csv")
View(top_20)
ports <- read.csv("F:/shiny/Data/topports_comma.csv")
View(ports)
world <- read.csv("F:/shiny/Data/world_regions_comma.csv")
View(world)
Imports <- read.csv("~/Imports.csv")
View(Imports)
plot.ts(Imports$Imports..Payments)
class(Imports)
imports = t(Imports)
View(imports)
row.names(imports)
row.names(imports)=NULL
view(imports)
View(imports)
myts <- ts(myvector, start=c(1999, 1), end=c(2007, 12), frequency=12)
myts <- ts(imports, start=c(1999, 1), end=c(2007, 12), frequency=12)
head(myts)
View(myts)
imports = t(Imports)
head(imports)
imports = read.csv("Imports.csv")
View(imports)
View(imports)
imports = read.csv("Imports.csv", row.names = "Imports..Payments.")
View(imports)
imports_t <- t(imports)
View(imports_t)
imports_t$date <- as.Date(row.names(imports))
row.names(imports)
row.names(imports_t)
grep("X1", row.names(imports_t))
?as.Date
?seq
row.names(imports)=NULL
row.names(imports_t)=NULL
View(imports_t)
imports_t$Date <- seq(as.Date("1999/01/01"),by = "month", length.out = nrow(imports_t) )
View(imports_t)
imports = read.csv("Imports.csv", row.names = "Imports..Payments.")
imports_t <- t(imports)
class(imports_t)
imports_t <- as.data.frame(t(imports))
class(imports_t)
imports_t$Date <- seq(as.Date("1999/01/01"),by = "month", length.out = nrow(imports_t) )
View(imports_t)
row.names(imports_t)=NULL
plot.ts(imports_t$`Total Travel and Tourism-Related Imports1`,imports_t$Date)
exports_t <- as.data.frame(t(Exports))
exports_t$Date <- seq(as.Date("1999/01/01"),by = "month", length.out = nrow(exports_t) )
row.names(exports_t)=NULL
View(exports_t)
Exports = read.csv("F:/shiny/Data/Exports.csv", row.names = "Exports..Payments.")
Exports = read.csv("F:/shiny/Data/Exports.csv", row.names = "Exports (Receipts)")
Exports = read.csv("F:/shiny/Data/Exports.csv", row.names = "Exports (Receipts)")
Exports = read.csv("Exports.csv", row.names = "Exports (Receipts)")
Exports <- read.csv("~/Exports.csv", row.names=1)
View(Exports)
exports_t <- as.data.frame(t(Exports))
exports_t$Date <- seq(as.Date("1999/01/01"),by = "month", length.out = nrow(exports_t) )
row.names(exports_t)=NULL
library(dplyr)
library(ggplot2)
library(xlsx)
imports = read.csv("Imports.csv", row.names = "Imports..Payments.")
imports_t <- as.data.frame(t(imports))
imports_t$Date <- seq(as.Date("1999/01/01"),by = "month", length.out = nrow(imports_t) )
row.names(imports_t)=NULL
exports_t <- as.data.frame(t(Exports))
exports_t$Date <- seq(as.Date("1999/01/01"),by = "month", length.out = nrow(exports_t) )
Exports <- read.csv("~/Exports.csv", row.names=1)
View(Exports)
exports_t <- as.data.frame(t(Exports))
exports_t$Date <- seq(as.Date("1999/01/01"),by = "month", length.out = nrow(exports_t) )
row.names(exports_t)=NULL
library(devtools)
install_github('sinhrks/ggfortify')
install.packages("ggfortify")
library(ggfortify)
library(ggplot2)
library(ggfortify)
install.packages("tidyr")
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
View(exports_t)
View(exports_t)
ggplot(imports_t, aes(x=imports_t$Date, y=imports_t$`Total Travel and Tourism-Related Imports1`)) + geom_line() +
xlab("") + ylab("")
S3method(autoplot,Arima)
S3method(autoplot,HoltWinters)
ggplot(imports_t, aes(x=imports_t$Date, y=imports_t$`Total Travel and Tourism-Related Imports1`)) + geom_line() +
xlab("") + ylab("") + scale_x_date(format = %Y-%m-%d)
ggplot(imports_t, aes(x=imports_t$Date, y=imports_t$`Total Travel and Tourism-Related Imports1`)) + geom_line() +
xlab("") + ylab("") + scale_x_date(format = "%Y-%m-%d")
ggplot(imports_t, aes(x=imports_t$Date, y=imports_t$Total Travel and Tourism-Related Imports1)) + geom_line() +
xlab("") + ylab("") + scale_x_date(format = "%Y-%m-%d")
ggplot(imports_t, aes(x=imports_t$Date, y=imports_t$Total Travel and Tourism-Related Imports1)) + geom_line() + scale_x_date(format = "%Y-%m-%d")
ggplot(imports_t, aes(x=imports_t$Date, y=imports_t$`Passenger Fare Payments5`)) + geom_line() + scale_x_date(format = "%Y-%m-%d")
ggplot(imports_t, aes(x=imports_t$Date, y=imports_t$`Passenger Fare Payments5`)) + geom_line() + scale_x_date()
ggplot(imports_t, aes(x=imports_t$Date, y=imports_t$`Passenger Fare Payments5`)) + geom_line() + scale_x_date(labels = date_format("%Y-%m-%d"))
library(scales)
ggplot(imports_t, aes(x=imports_t$Date, y=imports_t$`Passenger Fare Payments5`)) + geom_line() + scale_x_date(labels = date_format("%Y-%m-%d"))
ggplot(imports_t, aes(x = imports_t$Date, y =imports_t$`Total Travel and Tourism-Related Imports)) +
geom_line() +
geom_line(mapping = aes(y = Upper), lty = "dashed") +
geom_line(mapping = aes(y = Lower), lty = "dashed") +
geom_line(mapping = aes(y = Signif), lwd = 1.3, colour = "red")
)
)
))
facet_wrap()
ggplot(imports_t, aes(x = imports_t$Date, y =imports_t$`Total Travel and Tourism-Related Imports)) + geom_line() +
geom_line(mapping = aes(y = Upper), lty = "dashed") +
geom_line(mapping = aes(y = Lower), lty = "dashed") +
geom_line(mapping = aes(y = Signif), lwd = 1.3, colour = "red")
exports_t$Date <- as.Date(exports_t$Date, "%Y-%m-%d")
ggplot(imports_t, aes(x=imports_t$Date, y=imports_t$`Passenger Fare Payments5`)) + geom_line() + scale_x_date(
)
ggplot( data = exports_t, aes(exports_t$Date, exports_t$`Passenger Fare Receipts5`  )) + geom_line()
x = exports_t[:12,]
x = exports_t[0:12,]
head(x)
ggplot( data = x, aes(x$Date, x$`Passenger Fare Receipts5`  )) + geom_line()
ggplot( data = x, aes(x$Date, x$`Total Travel and Tourism-Related Exports1`)) + geom_line()
yes
x = exports_t[0:50,]
ggplot( data = x, aes(x$Date, x$`Total Travel and Tourism-Related Exports1`)) + geom_line()
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
devtools::install_github("hadley/tidyr")
install.packages("tidyr")
install.packages("assertthat")
install.packages("assertthat")
install.packages("magrittr")
install.packages("lazyeval")
install.packages("BH")
install.packages("R6")
install.packages("http://cran.r-project.org/src/contrib/Archive/dplyr/dplyr_0.4.1.tar.gz", repos=NULL)
install.packages("tidyr")
library(ggfortify)
autoplot(as.timeSeries(exports_t$`Total Travel and Tourism-Related Exports1`), ts.colour = ('dodgerblue3'))
install.packages("timeSeries")
library(timeSeries)
autoplot(as.timeSeries(exports_t$`Total Travel and Tourism-Related Exports1`), ts.colour = ('dodgerblue3'))
autoplot(as.timeSeries(exports_t$`Total Travel and Tourism-Related Exports1`))
autoplot(exports_t$`Total Travel and Tourism-Related Exports1`)
autoplot(as.timeSeries(exports_t$`Total Travel and Tourism-Related Exports1`))
autoplot(as.timeSeries(exports_t))
help("autoplot.ts")
class(exports_t$Date)
plot.ts(exports_t$Date,exports_t$`Total Travel and Tourism-Related Exports1`)
View(imports_t)
View(imports_t)
x <- merge(exports_t,imports_t, by = 'Date')
head(x)
imports$Trade <- 'Import'
head(import)
head(imports)
imports_t$Trade <- 'Import'
exports_t$Trade <- 'Export'
View(exports_t)
View(imports_t)
x <- merge(exports_t,imports_t, by = 'Date')
head(imports)
View(x)
View(x)
x <- merge(exports_t,imports_t,  by = 'Date', all = TRUE)
View(x)
names(x)[7] <- 'Trade'
x <- exports_t
x <- rbind.data.frame(imports_t)
View(x)
x <- exports_t
View(x)
x <- rbind(imports_t)
View(x)
x <- rbind(exports_t,imports_t)
names(exports_t) == names(imports_t)
names(exports_t)[1] <- 'Total Travel and Tourism Related Trade'
names(exports_t)[2] <- 'Total Payment'
names(exports_t)[5] <- 'Passenger Fare'
names(imports_t)[5] <- 'Passenger Fare'
names(imports_t)[2] <- 'Total Payment'
names(imports_t)[1] <- 'Total Travel and Tourism Related Trade'
names(exports_t) == names(imports_t)
x <- rbind(exports_t,imports_t)
View(x)
na.omit(x)
View(x)
x <- x[ !is.na(x) ]
x <- x[!is.na(x)]
View(x)
View(x)
x <- rbind(exports_t,imports_t)
sum(is.na(x))
xnew=x[complete.cases(x),]
sum(is.na(x))
xnew=x[complete.cases(x),]
sum(is.na(x))
sum(is.na(xnew))
View(xnew)
names(x)
plot.ts(exports_t$Date,exports_t$`Total Travel and Tourism-Related Exports1`) + plot.ts(exports_t$Date,exports_t$`Total Payment``)
plot.ts(exports_t$Date,exports_t$`Total Travel and Tourism-Related Exports1`)
plot.ts(exports_t$Date,exports_t$`Total Travel and Tourism-Related Exports1`)
plot.ts(exports_t$Date,exports_t$`Total Payment`, add = T)
write.csv(x)
write.csv(x, file = "fo.csv")
setwd("~/")
shiny::runApp()
View(x)
runApp()
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
class(x$Date)
runApp('new_app')
class(x$Date)
min(x$Date)
mqx(x$Date)
max(x$Date)
View(x)
runApp('new_app')
install.packages("dygraphs")
library(dygraphs)
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
write.csv(xnew, file = "foo.csv")
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
View(z)
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
lungDeaths <- cbind(mdeaths, fdeaths)
lungDeaths
class(lungDeaths)
library(xts)
as.xts(z)
as.xts(z$Date)
as.xts(z, order.by = z[7])
as.xts(z, order.by = z[,7])
runApp('new_app')
runApp('new_app')
runApp('new_app')
install.packages("stringr")
runApp('new_app')
library(stringr)
str_replace_all(df, fixed("$"), "")
as.numeric(z$Total.Travel.and.Tourism.Related.Trade)
runApp('new_app')
runApp('new_app')
runApp('new_app')
z[indx] <- lapply(z[indx], function(x) as.numeric(gsub("[,$]", "", x)))
runApp('new_app')
runApp('new_app')
runApp('new_app')
indx <- sapply(z, is.factor)
z[indx] <- lapply(z[indx], function(x) as.numeric(gsub("[,$]", "", x)))
head(z)
sapply(z[indx, 2], function(x) as.numeric(gsub("[,$]", "", x)))
gsub("[,$]", "", "$8,937"))
gsub("[,$]", "", "$8,937")
indx
sapply(z[, indx], function(x) as.numeric(gsub("[,$]", "", x)))
test = sapply(z[, indx], function(x) as.numeric(gsub("[,$]", "", x))
)
test
apply(z[, indx], function(x) as.numeric(gsub("[,$]", "", x)))
apply(z[, indx], FUN = function(x) as.numeric(gsub("[,$]", "", x)))
apply(z[, indx], FUN = function(x) as.numeric(gsub("[,$]", "", x)), MARGIN = 1)
apply(z[, indx], FUN = function(x) as.numeric(gsub("[,$]", "", x)), MARGIN = 0)
apply(z[, indx], FUN = function(x) as.numeric(gsub("[,$]", "", x)), MARGIN = 2)
sapply(z[, 2], function(x) as.numeric(gsub("[,$]", "", x)))
z[,2]- sapply(z[, 2], function(x) as.numeric(gsub("[,$]", "", x)))
z
View(z)
z[,2] <- sapply(z[, 2], function(x) as.numeric(gsub("[,$]", "", x)))
View(z)
z = read.csv('foo.csv', stringsAsFactors = F)
for (i in 2:6){
z[,i] <- sapply(z[, i], function(x) as.numeric(gsub("[,$]", "", x)))
}
View(z)
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
library(reshape2)
runApp('new_app')
df =  dcast(df, value = Trade )
df =  dcast(df,Trade ~ variable, value.var='value')
df =  dcast(df,date ~ variable)
runApp('new_app')
head(df)
runApp('new_app')
df = dcast(df, Trade)
df = dcast(df, SN ~ Trade)
df = dcast(df, Trade ~ variable)
z = read.csv('foo.csv', stringsAsFactors = F)
z = read.csv('foo.csv', stringsAsFactors = F)
for (i in 2:6){
z[,i] <- sapply(z[, i], function(x) as.numeric(gsub("[,$]", "", x)))
}
z$Date <- as.Date(x$Date, "%Y-%m-%d")
df = z[z$Date >= as.Date(input$dates[1]) & z$Date <= as.Date(input$dates[2]), ]
df = df[, c(as.integer(input$select), 7, 8)]
df =  dcast(df, value = Trade )
runApp('new_app')
class(df)
runApp('new_app')
dcast(df, value ~ Trade )
dcast(df, Trade ~ variable)
dcast(df, Total.Travel.and.Tourism.Related.Trade + Date ~ Trade)
df
runApp('new_app')
runApp('new_app')
colnames(z)
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
runApp('new_app')
shiny::runApp('my_app')
shiny::runApp('my_app')
runApp('my_app')
topports <- read.csv('topports.csv', stringsAsFactors = F)
setwd("~/my_app")
topports <- read.csv('topports.csv', stringsAsFactors = F)
names(topports)
View(topports)
topports <- topports[,c(1,2)]
Pie <- gvisPieChart(topports)
plot(Pie)
class(topports$OVERSEAS.TOTAL.2016)
View(topports)
topports$OVERSEAS.TOTAL.2016 <- as.numeric( sub(",", "", topports$OVERSEAS.TOTAL.2016 ) )
Pie <- gvisPieChart(topports)
plot(Pie)
runApp()
runApp()
runApp()
runApp()
